grafo8 = graph_from_literal(1-2,2-3,3-4,4-1)
plot(grafo8)
grafo8 = graph_from_literal(1-2-3-4-1,5)
plot(grafo8)
grafo8
grafo2 = graph(edges=c(1,2,2,3,3,4,4,1))
plot(grafo2)
grafo2
grafo3 = graph(edges=c(1,2,2,3,3,4,4,1),directed=F )
plot(grafo3)
grafo3
grafo4 = graph(edges=c(1,2,2,3,3,4,4,1),directed=F, n=10 )
plot(grafo4)
grafo5 <- graph(edges= c("A", "B", "B", "C", "C", "D","D", "E","E","A","A","C","C","B"))
plot(grafo5)
grafo6 <- graph(edges= c("A", "B", "B", "C", "C", "D","D", "E","E","A","A","C","C","B"), isolates=c("F","G"))
plot(grafo6)
#matriz adjacente
grafo6[]
#linha 1
grafo6[1,]
#coluna 1
grafo6[,2]
#nomes dos vértices
V(grafo6)$name
grafo7 <- graph(edges= c("Fernando", "Pedro", "José", "Antônio", "Fernando", "José","Fernando", "Antônio"))
plot(grafo7)
#pesos aos vértices como atributo
V(grafo7)$Peso = c(40,30,30,25)
#ler atributos, temos name e peso. Nome é padrão
vertex_attr(grafo7)
#atributos para arestas
E(grafo7)$TipoAmizade = c("Amigo","Inimigo","Inimigo","Amigo")
#mostra todos
edge_attr(grafo7)
#mostra atributo pelo nome
edge_attr(grafo7)$TipoAmizade
vertex_attr(grafo7)$Peso
#weight é atributo padrão
E(grafo7)$weight = c(1,2,1,3)
grafo7
#Tipo do grafo, agora temos os 4 simbolos preenchidos
V(grafo7)$type ="Humanos"
grafo7
grafo7 <- graph(edges= c("Fernando", "Pedro", "José", "Antônio", "Fernando", "José","Fernando", "Antônio"))
V(grafo7)$Peso = c(40,30,30,25)
E(grafo7)$TipoAmizade = c("Amigo","Inimigo","Inimigo","Amigo")
E(grafo7)$weight = c(1,2,1,3)
V(grafo7)$type ="Humanos"
#tamanho do vértice de acordo com o peso
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso)
#tamanho da areasta de acordo com o peso
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight)
#cores aos vértices em um atributo
vertex_attr(grafo7)$Cor = c("Blue", "Red", "Yellow", "Green")
#plot com cores a partir do atributo
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight, vertex.color= vertex_attr(grafo7)$Cor)
#curvado, titulo e frame
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight, vertex.color= vertex_attr(grafo7)$Cor, edge.curved=0.4, frame=TRUE, main="Grafo")
#vertice retângulo
plot(grafo7, vertex.size=vertex_attr(grafo7)$Peso, edge.width=edge_attr(grafo7)$weight, vertex.color= vertex_attr(grafo7)$Cor, edge.curved=0.4, frame=TRUE, main="Grafo", vertex.shape="square")
#grafo de relacionamentos
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#grafo de relacionamentos
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#install.packages("igraph")
library(igraph)
#carregamos um grafo de relacionamtos 53 vertices e 179 arestas
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#diametro (maior distância entre diferentes vértices)
diameter(grafo8, directed=T)
diameter(grafo8, directed=F)
#vértices que formam o diametro
get_diameter(grafo8, directed=T)
get_diameter(grafo8, directed=F)
#vizinhança, zero incluio o proprio vertice, mode all não considera a direção
neighborhood(grafo8, 0, mode=c("all"))
#densidade do grafo
edge_density(grafo8)
#teste de isomorfismo
grafo9 = grafo8
isomorphic(grafo8,grafo9)
#install.packages("igraph")
library(igraph)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
plot(dist)
#pesos nas arestas que vão representar distâncias
E(dist)$weight = c(2,1,2,1,2,1,1,3,1)
plot(dist, edge.label = E(dist)$weight)
tkplot(dist, edge.label = E(dist)$weight, vertex.color="white")
#calcula a distância mais curta entre dois vertices (calcula mas não mostra caminho)
distances(dist,V(dist)$name=="A",V(dist)$name=="H")
#verifica no grafo
plot(dist, edge.label = E(dist)$weight)
#busca o caminho mais curto
#output lista de vertices ou arestas, both retorna os dois
caminho = shortest_paths(dist,V(dist)$name=="A",V(dist)$name=="H", output=c("both"))
caminho$vpath
#conferindo
plot(dist, edge.label = E(dist)$weight)
#percorre os vértices
for(i in 1:length(V(dist)))
{ #se estiver na lista do caminho mais curto pinta de verde, se não cinza
V(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$vpath))
,"green","gray")
}
for(i in 1:length(E(dist)))
{  #se estiver na lista do caminho mais curto pinta de verde, se não cinza
E(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$epath))
, "green","gray")
}
plot(dist, edge.label = E(dist)$weight)
#install.packages("igraph")
library(igraph)
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#detecta comunidades
comun = cluster_edge_betweenness(grafo8)
#visualiza
comun
#cada vértice para qual comunidade pertecen
comun$membership
#impressão usando cor para comunidade
plot(grafo8, vertex.color = comun$membership)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
comun
comun = cluster_edge_betweenness(dist)
comun
comun$membership
plot(dist, vertex.color = comun$membership, edge.color="gray")
#min é número minimo de membros
cli = cliques(as.undirected(grafo8), min=4)
length(cli)
cli
#install.packages("igraph")
#install.packages("igraphdata")
library(igraph)
library(igraphdata)
data(Koenigsberg)
Koenigsberg
data(kite)
degree(kite, mode="all")
plot(comun,UKfaculty)
#install.packages("igraph")
install.packages("igraphdata")
#graus impares, não é um grafo euleriano
degree(Koenigsberg, mode="all")
data(Koenigsberg)
Koenigsberg
#install.packages("igraph")
#install.packages("igraphdata")
library(igraph)
#install.packages("igraph")
#install.packages("igraphdata")
library(igraph)
library(igraphdata)
data(Koenigsberg)
Koenigsberg
plot(Koenigsberg)
#graus impares, não é um grafo euleriano
degree(Koenigsberg, mode="all")
data(kite)
degree(kite, mode="all")
plot(kite)
data(UKfaculty)
UKfaculty
plot(UKfaculty)
comun=cluster_edge_betweenness(UKfaculty, directed = F)
plot(comun,UKfaculty)
#carregamos um grafo de relacionamtos 53 vertices e 179 arestas
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#carregamos um grafo de relacionamtos 53 vertices e 179 arestas
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
#53 vertices e 179 arestas
grafo8
plot(grafo8)
#grau de entrada e saída
degree(grafo8, mode="all")
#entrada
degree(grafo8, mode="in")
#saída
degree(grafo8, mode="out")
#colocando o grau no tamanho do vértice
grau  =  degree(grafo8, mode="in")
plot(grafo8, vertex.size=grau)
#vértices que formam o diametro
get_diameter(grafo8, directed=T)
#diametro (maior distância entre diferentes vértices)
diameter(grafo8, directed=T)
diameter(grafo8, directed=F)
#vértices que formam o diametro
get_diameter(grafo8, directed=T)
get_diameter(grafo8, directed=F)
#vizinhança, zero incluio o proprio vertice, mode all não considera a direção
neighborhood(grafo8, 0, mode=c("all"))
#densidade do grafo
edge_density(grafo8)
#teste de isomorfismo
grafo9 = grafo8
isomorphic(grafo8,grafo9)
#grafo de relacionamentos
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
tkplot(grafo8)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
plot(dist)
#pesos nas arestas que vão representar distâncias
E(dist)$weight = c(2,1,2,1,2,1,1,3,1)
plot(dist, edge.label = E(dist)$weight)
tkplot(dist, edge.label = E(dist)$weight, vertex.color="white")
#calcula a distância mais curta entre dois vertices (calcula mas não mostra caminho)
distances(dist,V(dist)$name=="A",V(dist)$name=="H")
#verifica no grafo
plot(dist, edge.label = E(dist)$weight)
#busca o caminho mais curto
#output lista de vertices ou arestas, both retorna os dois
caminho = shortest_paths(dist,V(dist)$name=="A",V(dist)$name=="H", output=c("both"))
caminho$vpath
#conferindo
plot(dist, edge.label = E(dist)$weight)
#percorre os vértices
for(i in 1:length(V(dist)))
{ #se estiver na lista do caminho mais curto pinta de verde, se não cinza
V(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$vpath))
,"green","gray")
}
for(i in 1:length(E(dist)))
{  #se estiver na lista do caminho mais curto pinta de verde, se não cinza
E(dist)$color[i] <- ifelse(i  %in% as.vector(unlist(caminho$epath))
, "green","gray")
}
plot(dist, edge.label = E(dist)$weight)
#install.packages("igraph")
library(igraph)
grafo8 = read_graph("Grafo.graphml", format = c("graphml"))
grafo8 = as.undirected(grafo8)
#detecta comunidades
comun = cluster_edge_betweenness(grafo8)
#visualiza
comun
#cada vértice para qual comunidade pertecen
comun$membership
#impressão usando cor para comunidade
plot(grafo8, vertex.color = comun$membership)
dist = graph(edges=c("A","C","A","B","B","E","B","F","C","D","G","H","D","H","E","H","F","G"),directed=TRUE)
comun = cluster_edge_betweenness(dist)
comun
comun$membership
plot(dist, vertex.color = comun$membership, edge.color="gray")
#min é número minimo de membros
cli = cliques(as.undirected(grafo8), min=4)
length(cli)
cli
install.packages("tm")
install.packages("textreadr")
install.packages("wordclound")
install.packages("wordClound")
install.packages("wordCloud")
install.packages("wordcloud")
library(tm)
library(textreadr)
library(wordcloud)
library(RColorBrewer)
# verficamos as fontes disponiveis
getSources()
#os formatos
getReaders()
# verficamos as fontes disponiveis
getSources()
#os formatos
getReaders()
#Criamos o corpus PCourpus():fisico, Vcourpus: voltail em memória
#pegamos dados da wiki
x = read_html("https://en.wikipedia.org/wiki/Black_hole")
corpus = VCorpus(VectorSource(x), readerControl = list(reader=readPlain, language = "eng"))
#resumo
inspect(corpus)
View(corpus)
View(corpus)
#resumo
inspect(corpus)
# corpus de 1 a 100
inspect(corpus[1:100])
# metadados do corpus
inspect(corpus[[1]])
# visualiza 1 corpus
inspect(corpus[[2]])
#texto separado por linha
as.character(corpus[[2]])
#só uma linha
as.character(corpus[[200]])[1]
#tm_map para executar as transformações
stopwords("portuguese")
#remove
corpus = tm_map(corpus, removeWords, stopwords('english'))
#execesso de espaços em branco
corpus = tm_map(corpus, stripWhitespace)
#pontuação
corpus = tm_map(corpus, removePunctuation)
#numeros
corpus = tm_map(corpus, removeNumbers)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(80), rot.per = 0.5, use.r.layout = T)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(10), rot.per = 0.5, use.r.layout = T)
freq = TermDocumentMatrix(corpus)
freq
#tranformando em matrix do R
matriz = as.matrix(freq)
#ordem de frequencia
matriz = sort(rowSums(matriz), decreasing = TRUE)
matriz = data.frame(word=names(matriz), freq=matriz)
head(matriz, n=100)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
#remove os menos frequentes
removeSparseTerms(freq. 0.4)
freq = TermDocumentMatrix(corpus)
freq
#tranformando em matrix do R
matriz = as.matrix(freq)
#ordem de frequencia
matriz = sort(rowSums(matriz), decreasing = TRUE)
matriz = data.frame(word=names(matriz), freq=matriz)
head(matriz, n=100)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
#remove os menos frequentes
removeSparseTerms(freq, 0.4)
wordcloud(matriz$word, matriz$freq, max.words = 50, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
# verficamos as fontes disponiveis
getSources()
#os formatos
getReaders()
#Criamos o corpus PCourpus():fisico, Vcourpus: voltail em memória
#pegamos dados da wiki
x = read_html("https://en.wikipedia.org/wiki/Alprazolam")
corpus = VCorpus(VectorSource(x), readerControl = list(reader=readPlain, language = "eng"))
#resumo
inspect(corpus)
# corpus de 1 a 100
inspect(corpus[1:100])
# metadados do corpus
inspect(corpus[[1]])
# visualiza 1 corpus
inspect(corpus[[2]])
#texto separado por linha
as.character(corpus[[2]])
#só uma linha
as.character(corpus[[200]])[1]
#pontuação
corpus = tm_map(corpus, removePunctuation)
#tm_map para executar as transformações
stopwords("portuguese")
#remove
corpus = tm_map(corpus, removeWords, stopwords('english'))
#execesso de espaços em branco
corpus = tm_map(corpus, stripWhitespace)
#pontuação
corpus = tm_map(corpus, removePunctuation)
#numeros
corpus = tm_map(corpus, removeNumbers)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(10), rot.per = 0.5, use.r.layout = T)
freq = TermDocumentMatrix(corpus)
freq
#tranformando em matrix do R
matriz = as.matrix(freq)
#ordem de frequencia
matriz = sort(rowSums(matriz), decreasing = TRUE)
matriz = data.frame(word=names(matriz), freq=matriz)
head(matriz, n=100)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
#remove os menos frequentes
removeSparseTerms(freq, 0.4)
wordcloud(matriz$word, matriz$freq, max.words = 50, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
# verficamos as fontes disponiveis
getSources()
#os formatos
getReaders()
#Criamos o corpus PCourpus():fisico, Vcourpus: voltail em memória
#pegamos dados da wiki
x = read_html("https://en.wikipedia.org/wiki/Benzodiazepine")
corpus = VCorpus(VectorSource(x), readerControl = list(reader=readPlain, language = "eng"))
#resumo
inspect(corpus)
# corpus de 1 a 100
inspect(corpus[1:100])
# metadados do corpus
inspect(corpus[[1]])
# visualiza 1 corpus
inspect(corpus[[2]])
#texto separado por linha
as.character(corpus[[2]])
#só uma linha
as.character(corpus[[200]])[1]
#tm_map para executar as transformações
stopwords("portuguese")
#remove
corpus = tm_map(corpus, removeWords, stopwords('english'))
#execesso de espaços em branco
corpus = tm_map(corpus, stripWhitespace)
#pontuação
corpus = tm_map(corpus, removePunctuation)
#numeros
corpus = tm_map(corpus, removeNumbers)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(10), rot.per = 0.5, use.r.layout = T)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
freq = TermDocumentMatrix(corpus)
freq
#tranformando em matrix do R
matriz = as.matrix(freq)
#ordem de frequencia
matriz = sort(rowSums(matriz), decreasing = TRUE)
matriz = data.frame(word=names(matriz), freq=matriz)
head(matriz, n=100)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
#remove os menos frequentes
removeSparseTerms(freq, 0.4)
wordcloud(matriz$word, matriz$freq, max.words = 50, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
library(tm)
library(textreadr)
library(wordcloud)
library(RColorBrewer)
# verficamos as fontes disponiveis
getSources()
#os formatos
getReaders()
#Criamos o corpus PCourpus():fisico, Vcourpus: voltail em memória
#pegamos dados da wiki
x = read_html("https://en.wikipedia.org/wiki/Benzodiazepine")
corpus = VCorpus(VectorSource(x), readerControl = list(reader=readPlain, language = "eng"))
#resumo
inspect(corpus)
# corpus de 1 a 100
inspect(corpus[1:100])
# metadados do corpus
inspect(corpus[[1]])
# visualiza 1 corpus
inspect(corpus[[2]])
#texto separado por linha
as.character(corpus[[2]])
#só uma linha
as.character(corpus[[200]])[1]
#tm_map para executar as transformações
stopwords("portuguese")
#tm_map para executar as transformações
stopwords("portuguese")
#remove
corpus = tm_map(corpus, removeWords, stopwords('english'))
#remove
corpus = tm_map(corpus, removeWords, stopwords('english'))
#execesso de espaços em branco
corpus = tm_map(corpus, stripWhitespace)
#pontuação
corpus = tm_map(corpus, removePunctuation)
#numeros
corpus = tm_map(corpus, removeNumbers)
wordcloud(corpus, max.words = 50, random.order = T, colors = rainbow(10), rot.per = 0.5, use.r.layout = T)
wordcloud(corpus, max.words = 100, random.order = T, colors = rainbow(10), rot.per = 0.5, use.r.layout = T)
wordcloud(corpus, max.words = 90, random.order = T, colors = rainbow(10), rot.per = 0.5, use.r.layout = T)
freq = TermDocumentMatrix(corpus)
freq
#tranformando em matrix do R
matriz = as.matrix(freq)
#ordem de frequencia
matriz = sort(rowSums(matriz), decreasing = TRUE)
matriz = data.frame(word=names(matriz), freq=matriz)
head(matriz, n=100)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
#remove os menos frequentes
removeSparseTerms(freq, 0.4)
View(freq)
View(freq)
#encontra os mais frequentes
findFreqTerms(freq, 500, Inf)
#remove os menos frequentes
removeSparseTerms(freq, 0.4)
wordcloud(matriz$word, matriz$freq, max.words = 50, random.order = T, colors = rainbow(8), rot.per = 0.5, use.r.layout = T)
install.packages("RPostgreSQL")
install.packages("mongolite")
library(RPostgreSQL)
```{r}
conexao = dbConnect("PostgreSQL",
dbname="postgres",
host="localhost",
port=5432,
user="postgres",
password="(alprazolam)"
)
sql = "SELECT quantidade, valortotal, produto, total FROM itensvenda iv
INNER JOIN vendas v ON (iv.IDVenda = v.IDVenda)
INNER JOIN produtos p ON (iv.IDProduto = p.IDProduto)"
vendas = dbGetQuery(conexao, sql)
class(vendas)
dim(vendas)
head(vendas)
dbDisconnect(conexao)
library(mongolite)
conexao = mongo(collection = "posts", db = "dbmidias", url = "mongodb://localhost")
dados = conexao$find()
dados = conexao$find('{"nome":"José"}')
rm(conexao)
gc
rm(conexao)
gc()
class(vendas)
dim(vendas)
head(vendas)
View(vendas)
View(vendas)
